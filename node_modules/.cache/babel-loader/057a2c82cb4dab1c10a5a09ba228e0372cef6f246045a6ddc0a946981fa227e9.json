{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI HUY\\\\my-app\\\\src\\\\pages\\\\AdminPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from '../components/Header/Header';\nimport Footer from '../components/Footer/Footer';\nimport QuestionCard from '../components/QuestionCard/QuestionCard';\nimport './AdminPanel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [error, setError] = useState(''); // Variable to store error messages\n  const [selectedQuestion, setSelectedQuestion] = useState(null); // Store the selected question\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        // Make a GET request to the API to fetch questions\n        const response = await axios.get('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions');\n\n        // Update the state with the fetched questions\n        setQuestions(response.data);\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n        setError('Unable to load questions. Please try again later.');\n      }\n    };\n    fetchQuestions(); // Fetch questions when the component mounts\n  }, []);\n  const handleQuestionClick = question => {\n    setSelectedQuestion(question); // Set the clicked question as the selected one\n  };\n  const handleAnswerSubmit = event => {\n    event.preventDefault();\n    // Handle answer submission logic here, e.g., send the answer to the API\n    const answer = event.target.answer.value;\n    console.log('Answer submitted:', answer);\n    setSelectedQuestion(null); // Clear the selected question after submission\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-list\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }, this), \"  \", questions.map(question => /*#__PURE__*/_jsxDEV(QuestionCard, {\n        question: question,\n        onClick: () => handleQuestionClick(question)\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), selectedQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Answer for: \", selectedQuestion.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAnswerSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"answer\",\n          rows: \"4\",\n          placeholder: \"Type your answer here...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminPanel, \"Mo6DbMdXSkGkkXYI2s46pyNj37Y=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","Footer","QuestionCard","jsxDEV","_jsxDEV","AdminPanel","_s","questions","setQuestions","error","setError","selectedQuestion","setSelectedQuestion","fetchQuestions","response","get","data","err","console","handleQuestionClick","question","handleAnswerSubmit","event","preventDefault","answer","target","value","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","id","text","onSubmit","name","rows","placeholder","required","type","_c","$RefreshReg$"],"sources":["C:/Users/HI HUY/my-app/src/pages/AdminPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Header from '../components/Header/Header';\r\nimport Footer from '../components/Footer/Footer';\r\nimport QuestionCard from '../components/QuestionCard/QuestionCard';\r\nimport './AdminPanel.css';\r\n\r\nconst AdminPanel = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [error, setError] = useState('');  // Variable to store error messages\r\n    const [selectedQuestion, setSelectedQuestion] = useState(null);  // Store the selected question\r\n\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                // Make a GET request to the API to fetch questions\r\n                const response = await axios.get('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions');\r\n\r\n                // Update the state with the fetched questions\r\n                setQuestions(response.data);\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n                setError('Unable to load questions. Please try again later.');\r\n            }\r\n        };\r\n\r\n        fetchQuestions();  // Fetch questions when the component mounts\r\n    }, []);\r\n\r\n    const handleQuestionClick = (question) => {\r\n        setSelectedQuestion(question);  // Set the clicked question as the selected one\r\n    };\r\n\r\n    const handleAnswerSubmit = (event) => {\r\n        event.preventDefault();\r\n        // Handle answer submission logic here, e.g., send the answer to the API\r\n        const answer = event.target.answer.value;\r\n        console.log('Answer submitted:', answer);\r\n        setSelectedQuestion(null);  // Clear the selected question after submission\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"question-list\">\r\n                {error && <p className=\"error\">{error}</p>}  {/* Display error if there's any */}\r\n                {questions.map((question) => (\r\n                    <QuestionCard \r\n                        key={question.id} \r\n                        question={question} \r\n                        onClick={() => handleQuestionClick(question)} \r\n                    />\r\n                ))}\r\n            </div>\r\n            {selectedQuestion && (\r\n                <div className=\"answer-form\">\r\n                    <h3>Answer for: {selectedQuestion.text}</h3>\r\n                    <form onSubmit={handleAnswerSubmit}>\r\n                        <textarea name=\"answer\" rows=\"4\" placeholder=\"Type your answer here...\" required />\r\n                        <button type=\"submit\">Submit Answer</button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}