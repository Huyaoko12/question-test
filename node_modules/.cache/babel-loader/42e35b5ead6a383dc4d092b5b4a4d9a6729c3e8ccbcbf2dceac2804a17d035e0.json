{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI HUY\\\\my-app\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Import axios để sử dụng\nimport Header from '../components/Header/Header';\nimport Footer from '../components/Footer/Footer';\nimport QuestionCard from '../components/QuestionCard/QuestionCard';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [error, setError] = useState(''); // Biến để lưu lỗi nếu có\n  const [newQuestion, setNewQuestion] = useState(''); // State để lưu câu hỏi mới\n\n  // Sử dụng useEffect để gọi API khi component được render lần đầu\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        // Gửi yêu cầu GET đến API\n        const response = await axios.get('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions');\n\n        // Cập nhật state với danh sách câu hỏi từ API\n        setQuestions(response.data);\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n        setError('Unable to load questions. Please try again later.');\n      }\n    };\n\n    // Gọi hàm fetchQuestions\n    fetchQuestions();\n  }, []); // Mảng [] để đảm bảo useEffect chỉ chạy một lần khi component mount\n\n  // Hàm để gửi câu hỏi mới đến API\n  const handleAddQuestion = async () => {\n    if (newQuestion.trim()) {\n      try {\n        // Gửi yêu cầu POST đến API để thêm câu hỏi mới\n        const response = await axios.post('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions', {\n          text: newQuestion\n        });\n\n        // Cập nhật state với danh sách câu hỏi, bao gồm câu hỏi mới\n        setQuestions([...questions, response.data]);\n        setNewQuestion(''); // Xóa nội dung ô nhập\n      } catch (err) {\n        console.error('Error adding question:', err);\n        setError('Unable to add question. Please try again later.');\n      }\n    } else {\n      setError('Question cannot be empty.');\n    }\n  };\n\n  // Hàm để xóa câu hỏi\n  const handleDeleteQuestion = async id => {\n    try {\n      // Gửi yêu cầu DELETE đến API để xóa câu hỏi\n      await axios.delete(`https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions/${id}`);\n\n      // Cập nhật state với danh sách câu hỏi sau khi xóa\n      setQuestions(questions.filter(question => question.id !== id));\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Unable to delete question. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-list\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }, this), \" \", questions.map(question => /*#__PURE__*/_jsxDEV(QuestionCard, {\n        question: question,\n        onDelete: handleDeleteQuestion // Truyền hàm xóa vào\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-question-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newQuestion,\n        onChange: e => setNewQuestion(e.target.value),\n        placeholder: \"Enter your question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddQuestion,\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"ZzAle/JoZeE5sDDzJ86sP6jFgQ8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","Header","Footer","QuestionCard","jsxDEV","_jsxDEV","Home","_s","questions","setQuestions","error","setError","newQuestion","setNewQuestion","fetchQuestions","response","get","data","err","console","handleAddQuestion","trim","post","text","handleDeleteQuestion","id","delete","filter","question","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onDelete","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HI HUY/my-app/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'; // Import axios để sử dụng\r\nimport Header from '../components/Header/Header';\r\nimport Footer from '../components/Footer/Footer';\r\nimport QuestionCard from '../components/QuestionCard/QuestionCard';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [error, setError] = useState('');  // Biến để lưu lỗi nếu có\r\n    const [newQuestion, setNewQuestion] = useState(''); // State để lưu câu hỏi mới\r\n\r\n    // Sử dụng useEffect để gọi API khi component được render lần đầu\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                // Gửi yêu cầu GET đến API\r\n                const response = await axios.get('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions');\r\n\r\n                // Cập nhật state với danh sách câu hỏi từ API\r\n                setQuestions(response.data);\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n                setError('Unable to load questions. Please try again later.');  \r\n            }\r\n        };\r\n\r\n        // Gọi hàm fetchQuestions\r\n        fetchQuestions();\r\n    }, []); // Mảng [] để đảm bảo useEffect chỉ chạy một lần khi component mount\r\n\r\n    // Hàm để gửi câu hỏi mới đến API\r\n    const handleAddQuestion = async () => {\r\n        if (newQuestion.trim()) {\r\n            try {\r\n                // Gửi yêu cầu POST đến API để thêm câu hỏi mới\r\n                const response = await axios.post('https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions', {\r\n                    text: newQuestion\r\n                });\r\n\r\n                // Cập nhật state với danh sách câu hỏi, bao gồm câu hỏi mới\r\n                setQuestions([...questions, response.data]);\r\n                setNewQuestion(''); // Xóa nội dung ô nhập\r\n            } catch (err) {\r\n                console.error('Error adding question:', err);\r\n                setError('Unable to add question. Please try again later.');\r\n            }\r\n        } else {\r\n            setError('Question cannot be empty.');\r\n        }\r\n    };\r\n\r\n    // Hàm để xóa câu hỏi\r\n    const handleDeleteQuestion = async (id) => {\r\n        try {\r\n            // Gửi yêu cầu DELETE đến API để xóa câu hỏi\r\n            await axios.delete(`https://66c2cb6dd057009ee9bdec9e.mockapi.io/api/Question/questions/${id}`);\r\n\r\n            // Cập nhật state với danh sách câu hỏi sau khi xóa\r\n            setQuestions(questions.filter((question) => question.id !== id));\r\n        } catch (err) {\r\n            console.error('Error deleting question:', err);\r\n            setError('Unable to delete question. Please try again later.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"question-list\">\r\n                {error && <p className=\"error\">{error}</p>} {/* Hiển thị lỗi nếu có */}\r\n                {questions.map((question) => (\r\n                    <QuestionCard \r\n                        key={question.id} \r\n                        question={question} \r\n                        onDelete={handleDeleteQuestion} // Truyền hàm xóa vào\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className=\"add-question-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newQuestion}\r\n                    onChange={(e) => setNewQuestion(e.target.value)}\r\n                    placeholder=\"Enter your question\"\r\n                />\r\n                <button onClick={handleAddQuestion}>Add Question</button>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}